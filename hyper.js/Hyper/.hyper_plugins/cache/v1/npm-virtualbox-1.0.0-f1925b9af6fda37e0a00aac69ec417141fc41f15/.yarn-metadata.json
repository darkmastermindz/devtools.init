{
  "manifest": {
    "name": "virtualbox",
    "version": "1.0.0",
    "description": "A library to interact with VirtualBox.",
    "author": {
      "name": "Azer Koculu",
      "email": "azer@kodfabrik.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/Node-Virtualization/node-virtualbox/issues"
    },
    "contributors": [
      {
        "name": "Azer Koculu",
        "email": "azer@kodfabrik.com",
        "url": "http://azer.bike"
      },
      {
        "name": "Michael Sanford",
        "url": "http://accidentalbeard.com"
      },
      {
        "name": "Steffen Roegner",
        "url": "http://www.sroegner.org"
      },
      {
        "name": "Jakub Lekstan",
        "url": "https://github.com/kuebk"
      },
      {
        "name": "Christopher'chief' Najewicz",
        "url": "http://chiefy.github.io"
      },
      {
        "name": "CÃ©dric Belin",
        "url": "http://belin.io"
      },
      {
        "name": "bschaepper",
        "url": "https://github.com/bschaepper"
      },
      {
        "name": "2roy999",
        "url": "https://github.com/2roy999"
      },
      {
        "name": "Felipe Miranda",
        "url": "https://github.com/felipemdrs"
      }
    ],
    "keywords": [
      "virtualbox",
      "vboxmanage",
      "vboxheadless"
    ],
    "scripts": {
      "test": "jshint ./lib ./test"
    },
    "main": "./lib/virtualbox",
    "repository": {
      "type": "git",
      "url": "https://github.com/Node-Virtualization/node-virtualbox.git"
    },
    "dependencies": {
      "log4js": "1.x"
    },
    "devDependencies": {
      "async": "^2.1.4",
      "jshint": "^2.9.6",
      "nodeunit": "^0.11.3"
    },
    "engines": {
      "engine": "node >= 0.4.1"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\hanse\\AppData\\Roaming\\Hyper\\.hyper_plugins\\cache\\v1\\npm-virtualbox-1.0.0-f1925b9af6fda37e0a00aac69ec417141fc41f15\\package.json",
    "readmeFilename": "README.md",
    "readme": "# node-virtualbox\n\n![NPM version](https://badge.fury.io/js/virtualbox.svg)\n[![david-dm badge](https://david-dm.org/Node-Virtualization/node-virtualbox/status.svg)](https://github.com/Node-Virtualization/node-virtualbox/blob/master/package.json)\n[![Build Status](https://travis-ci.org/Node-Virtualization/node-virtualbox.svg?branch=master)](https://travis-ci.org/Node-Virtualization/node-virtualbox)\n\nA JavaScript library to interact with [VirtualBox](https://www.virtualbox.org/) virtual machines.\n\n# Table of Contents\n- [Installation](#installation)\n- [Controlling Power and State](#controlling-power-and-state)\n\t- [Starting a cold machine: Two ways](#starting-a-cold-machine-two-ways)\n\t- [Stopping a machine](#stopping-a-machine)\n\t- [Pausing, Saving and Resuming a machine](#pausing-saving-and-resuming-a-machine)\n- [Controlling the guest OS](#controlling-the-guest-os)\n\t- [A note about security :warning:](#a-note-about-security)\n\t- [Running programs in the guest](#running-programs-in-the-guest)\n\t\t- [Executing commands as Administrators on Windows guests](#executing-commands-as-administrators-on-windows-guests)\n\t- [Killing programs in the guest](#killing-programs-in-the-guest)\n\t- [Sending keystrokes to a virtual machine](#sending-keystrokes-to-a-virtual-machine)\n- [Meta information about machine](#meta-information-about-machine)\n- [Putting it all together](#putting-it-all-together)\n- [Available Methods](#available-methods)\n- [Troubleshooting](#troubleshooting)\n- [More Examples](#more-examples)\n- [License (MIT)](#license)\n- [Contributing](#contributing)\n\n# Installation\n\nObtain the package\n\n```bash\n$ npm install virtualbox [--save] [-g]\n```\n\nand then use it\n\n```javascript\nvar virtualbox = require('virtualbox');\n```\n\nThe general formula for commands is:\n\n> virtualbox. **API command** ( \"**registered vm name**\", **[parameters]**, **callback** );\n\nAvailable API commands are listed at the end of this document.\n\n# Controlling Power and State\n\n`node-virtualbox` provides convenience methods to command the guest machine's power state in the customary ways.\n\n## Starting a cold machine: Two ways\n\nVirtual machines will _start headless by default_, but you can pass a boolean parameter to start them with a GUI:\n\n```javascript\nvirtualbox.start(\"machine_name\", true, function start_callback(error) {\n  if (error) throw error;\n  console.log(\"Virtual Machine has started WITH A GUI!\");\n});\n```\n\nSo as not to break pre-0.1.0 implementations, the old method still works (which also defaults to headless):\n\n```javascript\nvirtualbox.start(\"machine_name\", function start_callback(error) {\n  if (error) throw error;\n  console.log(\"Virtual Machine has started HEADLESS!\");\n});\n```\n\n## Stopping a machine\n\n**Note:** For historical reasons, `.stop` is an alias to `.savestate`.\n\n```javascript\nvirtualbox.stop(\"machine_name\", function stop_callback(error) {\n  if (error) throw error;\n  console.log(\"Virtual Machine has been saved\");\n});\n```\n\nTo halt a machine completely, you can use `poweroff` or `acpipowerbutton`:\n\n```javascript\nvirtualbox.poweroff(\"machine_name\", function poweroff_callback(error) {\n  if (error) throw error;\n  console.log(\"Virtual Machine has been powered off!\");\n});\n```\n\n```javascript\nvirtualbox.acpipowerbutton(\"machine_name\", function acpipower_callback(error) {\n  if (error) throw error;\n  console.log(\"Virtual Machine's ACPI power button was pressed.\");\n});\n```\n\n## Pausing, Saving and Resuming a machine\n\nNoting the caveat above that `.stop` is actually an alias to `.savestate`...\n\n```javascript\nvirtualbox.pause(\"machine_name\", function pause_callback(error) {\n  if (error) throw error;\n  console.log(\"Virtual Machine is now paused!\");\n});\n```\n\n```javascript\nvirtualbox.savestate(\"machine_name\", function save_callback(error) {\n  if (error) throw error;\n  console.log(\"Virtual Machine is now paused!\");\n});\n```\n\nAnd, in the same family, `acpisleepbutton`:\n\n```javascript\nvirtualbox.acpisleepbutton(\"machine_name\", function acpisleep_callback(error) {\n  if (error) throw error;\n  console.log(\"Virtual Machine's ACPI sleep button signal was sent.\");\n});\n```\n\nNote that you should probably _resume_ a machine which is in one of the above three states.\n\n```javascript\nvirtualbox.resume(\"machine_name\", function resume_callback(error) {\n  if (error) throw error;\n  console.log(\"Virtual Machine is now paused!\");\n});\n```\n\nAnd, of course, a reset button method:\n\n```javascript\nvirtualbox.reset(\"machine_name\", function reset_callback(error) {\n  if (error) throw error;\n  console.log(\"Virtual Machine's reset button was pressed!\");\n});\n```\n\n\n## Export a machine\n\nYou can export with `export` method:\n\n```javascript\nvirtualbox.export(\"machine_name\", \"output\", function export_callback(error) {\n  if(error) throw error;\n  console.log(\"Virtual Machine was exported!\");\n});\n```\n\n## Snapshot Manage\n\nYou can show snapshot list with `snapshotList` method:\n\n```javascript\nvirtualbox.snapshotList(\"machine_name\", function(error, snapshotList, currentSnapshotUUID) {\n  if(error) throw error;\n  if(snapshotList) {\n    console.log(JSON.stringify(snapshotList), JSON.stringify(currentSnapshotUUID));\n  }\n});\n```\n\nAnd, you can take a snapshot:\n\n```javascript\nvirtualbox.snapshotTake(\"machine_name\", \"snapshot_name\", function(error, uuid) {\n  if (error) throw error;\n\tconsole.log('Snapshot has been taken!');\n\tconsole.log('UUID: ', uuid);\n});\n```\n\nOr, delete a snapshot:\n\n```javascript\nvirtualbox.snapshotDelete(\"machine_name\", \"snapshot_name\", function(error) {\n  if (error) throw error;\n\tconsole.log('Snapshot has been deleted!');\n});\n```\n\nOr, restore a snapshot:\n\n```javascript\nvirtualbox.snapshotRestore(\"machine_name\", \"snapshot_name\", function(error) {\n  if (error) throw error;\n\tconsole.log('Snapshot has been restored!');\n});\n```\n\n# Controlling the guest OS\n\n## A note about security :warning:\n\n`node-virtualbox` is not opinionated: we believe that _you know best_ what _you_ need to do with _your_ virtual machine. Maybe that includes issuing `sudo rm -rf /` for some reason.\n\nTo that end, the `virtualbox` APIs provided by this module _take absolutely no steps_ to prevent you shooting yourself in the foot.\n\n:warning: Therefore, if you accept user input and pass it to the virtual machine, you should take your own steps to filter input before it gets passed to `virtualbox`.\n\nFor more details and discussion, see [issue #29](https://github.com/Node-Virtualization/node-virtualbox/issues/29).\n\n## Running programs in the guest\n\nThis method takes an options object with the name of the virtual machine, the path to the binary to be executed and any parameters to pass:\n\n```javascript\nvar options = {\n  vm: \"machine_name\",\n  cmd: \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\",\n  params: \"https://google.com\"\n}\n\nvirtualbox.exec(options, function exec_callback(error, stdout) {\n    if (error) throw error;\n    console.log('Started Internet Explorer...');\n});\n```\n\n### Executing commands as Administrators on Windows guests\n\nPass username and password information in an `options` object:\n\n```javascript\nvar options = {\n  vm: \"machine_name\",\n  user:\"Administrator\",\n  password: \"123456\",\n  cmd: \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\",\n  params: \"https://google.com\"\n};\n```\n\n## Killing programs in the guest\n\nTasks can be killed in the guest as well. In Windows guests this calls `taskkill.exe /im` and on Linux, BSD and OS X (Darwin) guests, it calls `sudo killall`:\n\n```javascript\nvirtualbox.kill({\n    vm: \"machine_name\",\n    cmd: \"iexplore.exe\"\n}, function kill_callback(error) {\n    if (error) throw error;\n    console.log('Terminated Internet Explorer.');\n});\n```\n\n## Sending keystrokes to a virtual machine\n\nKeyboard scan code sequences can be piped directly to a virtual machine's console:\n\n```javascript\nvar SCAN_CODES = virtualbox.SCAN_CODES;\nvar sequence = [\n  { key: 'SHIFT', type: 'make',  code: SCAN_CODES['SHIFT']},\n  { key: 'A',     type: 'make',  code: SCAN_CODES['A']},\n  { key: 'SHIFT', type: 'break', code: SCAN_CODES.getBreakCode('SHIFT')},\n  { key: 'A',     type: 'break', code: SCAN_CODES.getBreakCode('A')}\n];\n\nvirtualbox.keyboardputscancode(\"machine_name\", sequence, function keyscan_callback(err) {\n    if (error) throw error;\n    console.log('Sent SHIFT A');\n});\n```\n\n# Meta information about machine\n\nList all registered machines, returns an array:\n\n```javascript\nvirtualbox.list(function list_callback(machines, error) {\n  if (error) throw error;\n  // Act on machines\n});\n```\n\nObtaining a guest property by [key name](https://www.virtualbox.org/manual/ch04.html#guestadd-guestprops):\n\n```javascript\nvar options = {\n  vm: \"machine_name\",\n  key: \"/VirtualBox/GuestInfo/Net/0/V4/IP\"\n}\n\nvirtualbox.guestproperty(function guestproperty_callback(machines, error) {\n  if (error) throw error;\n  // Act on machines\n});\n```\n\nObtaining an extra property by key name:\n\n```javascript\nvar options = {\n  vm: \"machine_name\",\n  key: \"GUI/Fullscreen\"\n}\n\nvirtualbox.extradata.get(options, function extradataget_callback(error, value) {\n  if (error) throw error;\n  console.log('Virtual Machine \"%s\" extra \"%s\" value is \"%s\"', options.vm, options.key, value);\n});\n```\n\nWriting an extra property by key name:\n\n```javascript\nvar options = {\n  vm: \"machine_name\",\n  key: \"GUI/Fullscreen\",\n  value: \"true\"\n}\n\nvirtualbox.extradata.set(options, function extradataset_callback(error) {\n  if (error) throw error;\n  console.log('Set Virtual Machine \"%s\" extra \"%s\" value to \"%s\"', options.vm, options.key, options.value);\n});\n```\n\n# Putting it all together\n\n```javascript\nvar virtualbox = require('virtualbox');\n\nvirtualbox.start(\"machine_name\", function start_callback(error) {\n\n    if (error) throw error;\n\n    console.log('VM \"w7\" has been successfully started');\n\n    virtualbox.exec({\n        vm: \"machine_name\",\n        cmd: \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\",\n        params: \"http://google.com\"\n    }, function (error) {\n\n        if (error) throw error;\n        console.log('Running Internet Explorer...');\n\n    });\n\n});\n```\n\n# Available Methods\n\n`virtualbox`\n\n- `.pause({vm:\"machine_name\"}, callback)`\n- `.reset({vm:\"machine_name\"}, callback)`\n- `.resume({vm:\"machine_name\"}, callback)`\n- `.start({vm:\"machine_name\"}, callback)` and `.start({vm:\"machine_name\"}, true, callback)`\n- `.stop({vm:\"machine_name\"}, callback)`\n- `.savestate({vm:\"machine_name\"}, callback)`\n- `.export({vm:\"machine_name\"}, {output: \"output\"}, callback)`\n- `.poweroff({vm:\"machine_name\"}, callback)`\n- `.acpisleepbutton({vm:\"machine_name\"}, callback)`\n- `.acpipowerbutton({vm:\"machine_name\"}, callback)`\n- `.guestproperty({vm:\"machine_name\", property: \"propname\"}, callback)`\n- `.exec(){vm: \"machine_name\", cmd: \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\", params: \"http://google.com\"}, callback)`\n- `.exec(){vm: \"machine_name\", user:\"Administrator\", password: \"123456\", cmd: \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\", params: \"http://google.com\"}, callback)`\n- `.keyboardputscancode(\"machine_name\", [scan_codes], callback)`\n- `.kill({vm:\"machine_name\"}, callback)`\n- `.list(callback)`\n- `.isRunning({vm:\"machine_name\"}, callback)`\n- `.snapshotList({vm:\"machine_name\"}, callback)`\n- `.snapshotTake({vm:\"machine_name\"}, {vm:\"snapshot_name\"},  callback)`\n- `.snapshotDelete({vm:\"machine_name\"}, {vm:\"snapshot_UUID\"}, callback)`\n- `.snapshotRestore({vm:\"machine_name\"}, {vm:\"snapshot_UUID\"}, callback)`\n- `.extradata.get({vm:\"machine_name\", key:\"keyname\"}, callback)`\n- `.extradata.set({vm:\"machine_name\", key:\"keyname\", value:\"val\"}, callback)`\n\n# Troubleshooting\n\n- Make sure that Guest account is enabled on the VM.\n- Make sure your linux guest can `sudo` with `NOPASSWD` (at least for now).\n- VMs start headlessly by default: if you're having trouble with executing a command, start the VM with GUI and observe the screen after executing same command.\n- To avoid having \"Concurrent guest process limit is reached\" error message, execute your commands as an administrator.\n- Don't forget that this whole thing is asynchronous, and depends on the return of `vboxmanage` _not_ the actual running state/runlevel of services within the guest. See <https://github.com/Node-Virtualization/node-virtualbox/issues/9>\n\n# More Examples\n\n- [npm tests](https://github.com/Node-Virtualization/node-virtualbox/tree/master/test)\n\n# License\n\n[MIT](https://github.com/Node-Virtualization/node-virtualbox/blob/master/LICENSE)\n\n# Contributing\n\nPlease do!\n\n- [File an issue](https://github.com/Node-Virtualization/node-virtualbox/issues)\n- [Fork](https://github.com/Node-Virtualization/node-virtualbox#fork-destination-box) and send a pull request.\n\nPlease abide by the [Contributor Code of Conduct](https://github.com/Node-Virtualization/node-virtualbox/blob/master/code_of_conduct.md).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Azer KoÃ§ulu, Michael Sanford\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/virtualbox/-/virtualbox-1.0.0.tgz#f1925b9af6fda37e0a00aac69ec417141fc41f15",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/virtualbox/-/virtualbox-1.0.0.tgz",
    "hash": "f1925b9af6fda37e0a00aac69ec417141fc41f15",
    "registry": "npm",
    "packageName": "virtualbox"
  },
  "registry": "npm",
  "hash": "f1925b9af6fda37e0a00aac69ec417141fc41f15"
}